/**
 * Location Intelligence APIs
 * Incorporate our extensive geodata into everyday applications, business processes and workflows.
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package pb.locationintelligence;

import pb.ApiException;
import pb.locationintelligence.model.CrimeRiskResponse;
import pb.locationintelligence.model.EarthquakeRiskResponse;
import pb.locationintelligence.model.FireRiskResponse;
import pb.locationintelligence.model.FireStations;
import pb.locationintelligence.model.FloodRiskResponse;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LIAPIGeoRiskServiceApi
 */
public class LIAPIGeoRiskServiceApiTest {

    private final LIAPIGeoRiskServiceApi api = new LIAPIGeoRiskServiceApi();

    
    /**
     * Gets CrimeRiskResponse
     *
     * Returns the crime data or crime indexes for a given address input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCrimeRiskByAddressTest() throws ApiException {
        String address = null;
        String type = null;
        // CrimeRiskResponse response = api.getCrimeRiskByAddress(address, type);

        // TODO: test validations
    }
    
    /**
     * Gets CrimeRiskResponse
     *
     * Returns the crime data or crime indexes for a given location.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCrimeRiskByLocationTest() throws ApiException {
        String longitude = null;
        String latitude = null;
        String type = null;
        // CrimeRiskResponse response = api.getCrimeRiskByLocation(longitude, latitude, type);

        // TODO: test validations
    }
    
    /**
     * Gets EarthquakeRiskResponse
     *
     * Returns the count of earthquake events for various richter measurements and values for an input address.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEarthquakeRiskByAddressTest() throws ApiException {
        String address = null;
        String richterValue = null;
        // EarthquakeRiskResponse response = api.getEarthquakeRiskByAddress(address, richterValue);

        // TODO: test validations
    }
    
    /**
     * Gets EarthquakeRiskResponse
     *
     * Gets EarthquakeRiskResponse
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEarthquakeRiskByLocationTest() throws ApiException {
        String longitude = null;
        String latitude = null;
        String richterValue = null;
        // EarthquakeRiskResponse response = api.getEarthquakeRiskByLocation(longitude, latitude, richterValue);

        // TODO: test validations
    }
    
    /**
     * Gets FireRiskResponse
     *
     * Returns the fire data based on address input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFireRiskByAddressTest() throws ApiException {
        String address = null;
        // FireRiskResponse response = api.getFireRiskByAddress(address);

        // TODO: test validations
    }
    
    /**
     * Gets FireRiskResponse
     *
     * Returns the fire data based on location input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFireRiskByLocationTest() throws ApiException {
        String longitude = null;
        String latitude = null;
        // FireRiskResponse response = api.getFireRiskByLocation(longitude, latitude);

        // TODO: test validations
    }
    
    /**
     * Gets FireStationResponse
     *
     * Returns the nearest Firestations from an input address.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFireStationByAddressTest() throws ApiException {
        String address = null;
        String maxCandidates = null;
        String travelTime = null;
        String travelTimeUnit = null;
        String travelDistance = null;
        String travelDistanceUnit = null;
        String sortBy = null;
        // FireStations response = api.getFireStationByAddress(address, maxCandidates, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, sortBy);

        // TODO: test validations
    }
    
    /**
     * Gets FireStationResponse
     *
     * Returns the nearest Firestations from an input location.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFireStationByLocationTest() throws ApiException {
        String longitude = null;
        String latitude = null;
        String maxCandidates = null;
        String travelTime = null;
        String travelTimeUnit = null;
        String travelDistance = null;
        String travelDistanceUnit = null;
        String sortBy = null;
        // FireStations response = api.getFireStationByLocation(longitude, latitude, maxCandidates, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, sortBy);

        // TODO: test validations
    }
    
    /**
     * Gets FloodRiskResponse
     *
     * Returns the Flood Risk data for flood zones based on an address.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFloodRiskByAddressTest() throws ApiException {
        String address = null;
        String includeZoneDesc = null;
        // FloodRiskResponse response = api.getFloodRiskByAddress(address, includeZoneDesc);

        // TODO: test validations
    }
    
    /**
     * Gets FloodRiskResponse
     *
     * Returns the Flood Risk data for Flood Zones and Base Flood Elevation, based on location.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFloodRiskByLocationTest() throws ApiException {
        String longitude = null;
        String latitude = null;
        String includeZoneDesc = null;
        // FloodRiskResponse response = api.getFloodRiskByLocation(longitude, latitude, includeZoneDesc);

        // TODO: test validations
    }
    
}
